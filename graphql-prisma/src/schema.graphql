type Query {
    users(query: String): [User!]!
    recipes(query: String): [Recipe!]!
    recipesByIngredients(query: String): [Recipe!]!
    comments: [Comment!]!
}

type Mutation {
    createUser(data: CreateUserInput!): AuthPayload!
    login(data: LoginUserInput!): AuthPayload!
    deleteUser: User!
    updateUser(data: UpdateUserInput!): User!
    createRecipe(data: CreateReciepieInput!): Recipe!
    updateRecipe(data: UpdateReciepieInput!): Recipe!
    deleteRecipe(id: ID!): Recipe!
    createComment(data: CreateCommentInput!): Comment!
    deleteComment(id: ID!): Comment!
}

type Subscription {
    comment(recipeId: ID!): Comment!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
}

type AuthPayload {
    token: String!
    user: User!
}

input LoginUserInput {
    email: String!
    password: String!
}

input CreateReciepieInput {
    title: String!
    description: String!
    ingredients: [String!]!
    directions: [String!]!
    prep: Int!
    cook: Int!
}

input UpdateReciepieInput {
    id: ID!
    title: String!
    description: String!
    ingredients: [String!]!
    directions: [String!]!
    prep: Int!
    cook: Int!
}

input CreateCommentInput {
    text: String!
    recipe: ID!
}


type User {
    id: ID!
    name: String!
    password: String!
    email: String!
    recipes: [Recipe!]!
    comments: [Comment!]!
}

type Recipe {
    id: ID!
    title: String!
    description: String!
    ingredients: [String!]!
    directions: [String!]!
    prep: Int!
    cook: Int!
    author: User!
    comments: [Comment!]!
}


type Comment {
    id: ID!
    text: String!
    author: User!
    recipe: Recipe!
}