type AggregateComment {
  count: Int!
}

type AggregateRecipe {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  # The number of nodes that have been affected by the Batch operation.
  count: Long!
}

type Comment implements Node {
  id: ID!
  text: String!
  author: User!
  Recipe: Recipe!
}

# A connection to a list of items.
type CommentConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  text: String!
  author: UserCreateOneWithoutCommentsInput!
  Recipe: RecipeCreateOneWithoutCommentsInput!
}

input CommentCreateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutRecipeInput {
  create: [CommentCreateWithoutRecipeInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutAuthorInput {
  id: ID
  text: String!
  Recipe: RecipeCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutRecipeInput {
  id: ID
  text: String!
  author: UserCreateOneWithoutCommentsInput!
}

# An edge in a connection.
type CommentEdge {
  # The item at the end of the edge.
  node: Comment!
  # A cursor for use in pagination.
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
}

type CommentPreviousValues {
  id: ID!
  text: String!
}

input CommentScalarWhereInput {
  # Logical AND on all given filters.
  AND: [CommentScalarWhereInput!]
  # Logical OR on all given filters.
  OR: [CommentScalarWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [CommentScalarWhereInput!]
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  text: String
  # All values that are not equal to given value.
  text_not: String
  # All values that are contained in given list.
  text_in: [String!]
  # All values that are not contained in given list.
  text_not_in: [String!]
  # All values less than the given value.
  text_lt: String
  # All values less than or equal the given value.
  text_lte: String
  # All values greater than the given value.
  text_gt: String
  # All values greater than or equal the given value.
  text_gte: String
  # All values containing the given string.
  text_contains: String
  # All values not containing the given string.
  text_not_contains: String
  # All values starting with the given string.
  text_starts_with: String
  # All values not starting with the given string.
  text_not_starts_with: String
  # All values ending with the given string.
  text_ends_with: String
  # All values not ending with the given string.
  text_not_ends_with: String
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [CommentSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [CommentSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [CommentSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

input CommentUpdateInput {
  text: String
  author: UserUpdateOneRequiredWithoutCommentsInput
  Recipe: RecipeUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  text: String
}

input CommentUpdateManyMutationInput {
  text: String
}

input CommentUpdateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutRecipeInput {
  create: [CommentCreateWithoutRecipeInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutRecipeInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutRecipeInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutAuthorDataInput {
  text: String
  Recipe: RecipeUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutRecipeDataInput {
  text: String
  author: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutAuthorDataInput!
}

input CommentUpdateWithWhereUniqueWithoutRecipeInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutRecipeDataInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutAuthorDataInput!
  create: CommentCreateWithoutAuthorInput!
}

input CommentUpsertWithWhereUniqueWithoutRecipeInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutRecipeDataInput!
  create: CommentCreateWithoutRecipeInput!
}

input CommentWhereInput {
  # Logical AND on all given filters.
  AND: [CommentWhereInput!]
  # Logical OR on all given filters.
  OR: [CommentWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [CommentWhereInput!]
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  text: String
  # All values that are not equal to given value.
  text_not: String
  # All values that are contained in given list.
  text_in: [String!]
  # All values that are not contained in given list.
  text_not_in: [String!]
  # All values less than the given value.
  text_lt: String
  # All values less than or equal the given value.
  text_lte: String
  # All values greater than the given value.
  text_gt: String
  # All values greater than or equal the given value.
  text_gte: String
  # All values containing the given string.
  text_contains: String
  # All values not containing the given string.
  text_not_contains: String
  # All values starting with the given string.
  text_starts_with: String
  # All values not starting with the given string.
  text_not_starts_with: String
  # All values ending with the given string.
  text_ends_with: String
  # All values not ending with the given string.
  text_not_ends_with: String
  author: UserWhereInput
  Recipe: RecipeWhereInput
}

input CommentWhereUniqueInput {
  id: ID
}

# Raw JSON value
scalar Json

# The `Long` scalar type
#  represents non-fractional signed whole numeric values.
# Long can represent values between -(2^63) and 2^63 - 1.
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createRecipe(data: RecipeCreateInput!): Recipe!
  createComment(data: CommentCreateInput!): Comment!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateRecipe(data: RecipeUpdateInput!, where: RecipeWhereUniqueInput!): Recipe
  updateComment(
    data: CommentUpdateInput!
    where: CommentWhereUniqueInput!
  ): Comment
  deleteUser(where: UserWhereUniqueInput!): User
  deleteRecipe(where: RecipeWhereUniqueInput!): Recipe
  deleteComment(where: CommentWhereUniqueInput!): Comment
  upsertUser(
    where: UserWhereUniqueInput!
    create: UserCreateInput!
    update: UserUpdateInput!
  ): User!
  upsertRecipe(
    where: RecipeWhereUniqueInput!
    create: RecipeCreateInput!
    update: RecipeUpdateInput!
  ): Recipe!
  upsertComment(
    where: CommentWhereUniqueInput!
    create: CommentCreateInput!
    update: CommentUpdateInput!
  ): Comment!
  updateManyUsers(
    data: UserUpdateManyMutationInput!
    where: UserWhereInput
  ): BatchPayload!
  updateManyRecipes(
    data: RecipeUpdateManyMutationInput!
    where: RecipeWhereInput
  ): BatchPayload!
  updateManyComments(
    data: CommentUpdateManyMutationInput!
    where: CommentWhereInput
  ): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyRecipes(where: RecipeWhereInput): BatchPayload!
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!
  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!
  # When paginating backwards, the cursor to continue.
  startCursor: String
  # When paginating forwards, the cursor to continue.
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Query {
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User]!
  recipes(
    where: RecipeWhereInput
    orderBy: RecipeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Recipe]!
  comments(
    where: CommentWhereInput
    orderBy: CommentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Comment]!
  user(where: UserWhereUniqueInput!): User
  recipe(where: RecipeWhereUniqueInput!): Recipe
  comment(where: CommentWhereUniqueInput!): Comment
  usersConnection(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): UserConnection!
  recipesConnection(
    where: RecipeWhereInput
    orderBy: RecipeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): RecipeConnection!
  commentsConnection(
    where: CommentWhereInput
    orderBy: CommentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CommentConnection!
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type Recipe implements Node {
  id: ID!
  title: String!
  description: String
  ingredients: [String!]!
  detailedIngredients: [String!]!
  directions: [String!]!
  prep: Int!
  cook: Int!
  author: User!
  comments(
    where: CommentWhereInput
    orderBy: CommentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Comment!]
}

# A connection to a list of items.
type RecipeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [RecipeEdge]!
  aggregate: AggregateRecipe!
}

input RecipeCreatedetailedIngredientsInput {
  set: [String!]
}

input RecipeCreatedirectionsInput {
  set: [String!]
}

input RecipeCreateingredientsInput {
  set: [String!]
}

input RecipeCreateInput {
  id: ID
  title: String!
  description: String
  prep: Int!
  cook: Int!
  ingredients: RecipeCreateingredientsInput
  detailedIngredients: RecipeCreatedetailedIngredientsInput
  directions: RecipeCreatedirectionsInput
  author: UserCreateOneWithoutRecipesInput!
  comments: CommentCreateManyWithoutRecipeInput
}

input RecipeCreateManyWithoutAuthorInput {
  create: [RecipeCreateWithoutAuthorInput!]
  connect: [RecipeWhereUniqueInput!]
}

input RecipeCreateOneWithoutCommentsInput {
  create: RecipeCreateWithoutCommentsInput
  connect: RecipeWhereUniqueInput
}

input RecipeCreateWithoutAuthorInput {
  id: ID
  title: String!
  description: String
  prep: Int!
  cook: Int!
  ingredients: RecipeCreateingredientsInput
  detailedIngredients: RecipeCreatedetailedIngredientsInput
  directions: RecipeCreatedirectionsInput
  comments: CommentCreateManyWithoutRecipeInput
}

input RecipeCreateWithoutCommentsInput {
  id: ID
  title: String!
  description: String
  prep: Int!
  cook: Int!
  ingredients: RecipeCreateingredientsInput
  detailedIngredients: RecipeCreatedetailedIngredientsInput
  directions: RecipeCreatedirectionsInput
  author: UserCreateOneWithoutRecipesInput!
}

# An edge in a connection.
type RecipeEdge {
  # The item at the end of the edge.
  node: Recipe!
  # A cursor for use in pagination.
  cursor: String!
}

enum RecipeOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  prep_ASC
  prep_DESC
  cook_ASC
  cook_DESC
}

type RecipePreviousValues {
  id: ID!
  title: String!
  description: String
  ingredients: [String!]!
  detailedIngredients: [String!]!
  directions: [String!]!
  prep: Int!
  cook: Int!
}

input RecipeScalarWhereInput {
  # Logical AND on all given filters.
  AND: [RecipeScalarWhereInput!]
  # Logical OR on all given filters.
  OR: [RecipeScalarWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [RecipeScalarWhereInput!]
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  title: String
  # All values that are not equal to given value.
  title_not: String
  # All values that are contained in given list.
  title_in: [String!]
  # All values that are not contained in given list.
  title_not_in: [String!]
  # All values less than the given value.
  title_lt: String
  # All values less than or equal the given value.
  title_lte: String
  # All values greater than the given value.
  title_gt: String
  # All values greater than or equal the given value.
  title_gte: String
  # All values containing the given string.
  title_contains: String
  # All values not containing the given string.
  title_not_contains: String
  # All values starting with the given string.
  title_starts_with: String
  # All values not starting with the given string.
  title_not_starts_with: String
  # All values ending with the given string.
  title_ends_with: String
  # All values not ending with the given string.
  title_not_ends_with: String
  description: String
  # All values that are not equal to given value.
  description_not: String
  # All values that are contained in given list.
  description_in: [String!]
  # All values that are not contained in given list.
  description_not_in: [String!]
  # All values less than the given value.
  description_lt: String
  # All values less than or equal the given value.
  description_lte: String
  # All values greater than the given value.
  description_gt: String
  # All values greater than or equal the given value.
  description_gte: String
  # All values containing the given string.
  description_contains: String
  # All values not containing the given string.
  description_not_contains: String
  # All values starting with the given string.
  description_starts_with: String
  # All values not starting with the given string.
  description_not_starts_with: String
  # All values ending with the given string.
  description_ends_with: String
  # All values not ending with the given string.
  description_not_ends_with: String
  prep: Int
  # All values that are not equal to given value.
  prep_not: Int
  # All values that are contained in given list.
  prep_in: [Int!]
  # All values that are not contained in given list.
  prep_not_in: [Int!]
  # All values less than the given value.
  prep_lt: Int
  # All values less than or equal the given value.
  prep_lte: Int
  # All values greater than the given value.
  prep_gt: Int
  # All values greater than or equal the given value.
  prep_gte: Int
  cook: Int
  # All values that are not equal to given value.
  cook_not: Int
  # All values that are contained in given list.
  cook_in: [Int!]
  # All values that are not contained in given list.
  cook_not_in: [Int!]
  # All values less than the given value.
  cook_lt: Int
  # All values less than or equal the given value.
  cook_lte: Int
  # All values greater than the given value.
  cook_gt: Int
  # All values greater than or equal the given value.
  cook_gte: Int
}

type RecipeSubscriptionPayload {
  mutation: MutationType!
  node: Recipe
  updatedFields: [String!]
  previousValues: RecipePreviousValues
}

input RecipeSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [RecipeSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [RecipeSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [RecipeSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: RecipeWhereInput
}

input RecipeUpdatedetailedIngredientsInput {
  set: [String!]
}

input RecipeUpdatedirectionsInput {
  set: [String!]
}

input RecipeUpdateingredientsInput {
  set: [String!]
}

input RecipeUpdateInput {
  title: String
  description: String
  prep: Int
  cook: Int
  ingredients: RecipeUpdateingredientsInput
  detailedIngredients: RecipeUpdatedetailedIngredientsInput
  directions: RecipeUpdatedirectionsInput
  author: UserUpdateOneRequiredWithoutRecipesInput
  comments: CommentUpdateManyWithoutRecipeInput
}

input RecipeUpdateManyDataInput {
  title: String
  description: String
  prep: Int
  cook: Int
  ingredients: RecipeUpdateingredientsInput
  detailedIngredients: RecipeUpdatedetailedIngredientsInput
  directions: RecipeUpdatedirectionsInput
}

input RecipeUpdateManyMutationInput {
  title: String
  description: String
  prep: Int
  cook: Int
  ingredients: RecipeUpdateingredientsInput
  detailedIngredients: RecipeUpdatedetailedIngredientsInput
  directions: RecipeUpdatedirectionsInput
}

input RecipeUpdateManyWithoutAuthorInput {
  create: [RecipeCreateWithoutAuthorInput!]
  connect: [RecipeWhereUniqueInput!]
  set: [RecipeWhereUniqueInput!]
  disconnect: [RecipeWhereUniqueInput!]
  delete: [RecipeWhereUniqueInput!]
  update: [RecipeUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [RecipeUpdateManyWithWhereNestedInput!]
  deleteMany: [RecipeScalarWhereInput!]
  upsert: [RecipeUpsertWithWhereUniqueWithoutAuthorInput!]
}

input RecipeUpdateManyWithWhereNestedInput {
  where: RecipeScalarWhereInput!
  data: RecipeUpdateManyDataInput!
}

input RecipeUpdateOneRequiredWithoutCommentsInput {
  create: RecipeCreateWithoutCommentsInput
  connect: RecipeWhereUniqueInput
  update: RecipeUpdateWithoutCommentsDataInput
  upsert: RecipeUpsertWithoutCommentsInput
}

input RecipeUpdateWithoutAuthorDataInput {
  title: String
  description: String
  prep: Int
  cook: Int
  ingredients: RecipeUpdateingredientsInput
  detailedIngredients: RecipeUpdatedetailedIngredientsInput
  directions: RecipeUpdatedirectionsInput
  comments: CommentUpdateManyWithoutRecipeInput
}

input RecipeUpdateWithoutCommentsDataInput {
  title: String
  description: String
  prep: Int
  cook: Int
  ingredients: RecipeUpdateingredientsInput
  detailedIngredients: RecipeUpdatedetailedIngredientsInput
  directions: RecipeUpdatedirectionsInput
  author: UserUpdateOneRequiredWithoutRecipesInput
}

input RecipeUpdateWithWhereUniqueWithoutAuthorInput {
  where: RecipeWhereUniqueInput!
  data: RecipeUpdateWithoutAuthorDataInput!
}

input RecipeUpsertWithoutCommentsInput {
  update: RecipeUpdateWithoutCommentsDataInput!
  create: RecipeCreateWithoutCommentsInput!
}

input RecipeUpsertWithWhereUniqueWithoutAuthorInput {
  where: RecipeWhereUniqueInput!
  update: RecipeUpdateWithoutAuthorDataInput!
  create: RecipeCreateWithoutAuthorInput!
}

input RecipeWhereInput {
  # Logical AND on all given filters.
  AND: [RecipeWhereInput!]
  # Logical OR on all given filters.
  OR: [RecipeWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [RecipeWhereInput!]
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  title: String
  # All values that are not equal to given value.
  title_not: String
  # All values that are contained in given list.
  title_in: [String!]
  # All values that are not contained in given list.
  title_not_in: [String!]
  # All values less than the given value.
  title_lt: String
  # All values less than or equal the given value.
  title_lte: String
  # All values greater than the given value.
  title_gt: String
  # All values greater than or equal the given value.
  title_gte: String
  # All values containing the given string.
  title_contains: String
  # All values not containing the given string.
  title_not_contains: String
  # All values starting with the given string.
  title_starts_with: String
  # All values not starting with the given string.
  title_not_starts_with: String
  # All values ending with the given string.
  title_ends_with: String
  # All values not ending with the given string.
  title_not_ends_with: String
  description: String
  # All values that are not equal to given value.
  description_not: String
  # All values that are contained in given list.
  description_in: [String!]
  # All values that are not contained in given list.
  description_not_in: [String!]
  # All values less than the given value.
  description_lt: String
  # All values less than or equal the given value.
  description_lte: String
  # All values greater than the given value.
  description_gt: String
  # All values greater than or equal the given value.
  description_gte: String
  # All values containing the given string.
  description_contains: String
  # All values not containing the given string.
  description_not_contains: String
  # All values starting with the given string.
  description_starts_with: String
  # All values not starting with the given string.
  description_not_starts_with: String
  # All values ending with the given string.
  description_ends_with: String
  # All values not ending with the given string.
  description_not_ends_with: String
  prep: Int
  # All values that are not equal to given value.
  prep_not: Int
  # All values that are contained in given list.
  prep_in: [Int!]
  # All values that are not contained in given list.
  prep_not_in: [Int!]
  # All values less than the given value.
  prep_lt: Int
  # All values less than or equal the given value.
  prep_lte: Int
  # All values greater than the given value.
  prep_gt: Int
  # All values greater than or equal the given value.
  prep_gte: Int
  cook: Int
  # All values that are not equal to given value.
  cook_not: Int
  # All values that are contained in given list.
  cook_in: [Int!]
  # All values that are not contained in given list.
  cook_not_in: [Int!]
  # All values less than the given value.
  cook_lt: Int
  # All values less than or equal the given value.
  cook_lte: Int
  # All values greater than the given value.
  cook_gt: Int
  # All values greater than or equal the given value.
  cook_gte: Int
  author: UserWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input RecipeWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  recipe(where: RecipeSubscriptionWhereInput): RecipeSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  recipes(
    where: RecipeWhereInput
    orderBy: RecipeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Recipe!]
  comments(
    where: CommentWhereInput
    orderBy: CommentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Comment!]
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  recipes: RecipeCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRecipesInput {
  create: UserCreateWithoutRecipesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  name: String!
  email: String!
  recipes: RecipeCreateManyWithoutAuthorInput
}

input UserCreateWithoutRecipesInput {
  id: ID
  name: String!
  email: String!
  comments: CommentCreateManyWithoutAuthorInput
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge.
  node: User!
  # A cursor for use in pagination.
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [UserSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [UserSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [UserSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  recipes: RecipeUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutRecipesInput {
  create: UserCreateWithoutRecipesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutRecipesDataInput
  upsert: UserUpsertWithoutRecipesInput
}

input UserUpdateWithoutCommentsDataInput {
  name: String
  email: String
  recipes: RecipeUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutRecipesDataInput {
  name: String
  email: String
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutRecipesInput {
  update: UserUpdateWithoutRecipesDataInput!
  create: UserCreateWithoutRecipesInput!
}

input UserWhereInput {
  # Logical AND on all given filters.
  AND: [UserWhereInput!]
  # Logical OR on all given filters.
  OR: [UserWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [UserWhereInput!]
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String
  # All values that are not equal to given value.
  name_not: String
  # All values that are contained in given list.
  name_in: [String!]
  # All values that are not contained in given list.
  name_not_in: [String!]
  # All values less than the given value.
  name_lt: String
  # All values less than or equal the given value.
  name_lte: String
  # All values greater than the given value.
  name_gt: String
  # All values greater than or equal the given value.
  name_gte: String
  # All values containing the given string.
  name_contains: String
  # All values not containing the given string.
  name_not_contains: String
  # All values starting with the given string.
  name_starts_with: String
  # All values not starting with the given string.
  name_not_starts_with: String
  # All values ending with the given string.
  name_ends_with: String
  # All values not ending with the given string.
  name_not_ends_with: String
  email: String
  # All values that are not equal to given value.
  email_not: String
  # All values that are contained in given list.
  email_in: [String!]
  # All values that are not contained in given list.
  email_not_in: [String!]
  # All values less than the given value.
  email_lt: String
  # All values less than or equal the given value.
  email_lte: String
  # All values greater than the given value.
  email_gt: String
  # All values greater than or equal the given value.
  email_gte: String
  # All values containing the given string.
  email_contains: String
  # All values not containing the given string.
  email_not_contains: String
  # All values starting with the given string.
  email_starts_with: String
  # All values not starting with the given string.
  email_not_starts_with: String
  # All values ending with the given string.
  email_ends_with: String
  # All values not ending with the given string.
  email_not_ends_with: String
  recipes_every: RecipeWhereInput
  recipes_some: RecipeWhereInput
  recipes_none: RecipeWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

